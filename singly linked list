#include <iostream>
using namespace std;
class node{
    public :

    int data;
    node* next;

      node(int data) {
        this -> data = data;
        this -> next = NULL;
      }

};

void deletenode(node *&head,int position){
    node *current=head;
    
    
    int count = 1; 
    node *prev = NULL;
    if(position == 1){
         prev = current;
         head= current->next;
         current->next = NULL;
        
    }
    while(count<position){
         prev = current;
        current = current->next;
        count ++;
       
        
    }
    prev->next = current->next;
    current->next = NULL;
}

 void insertAtbegin(node*& head,int data){
     node *temp = new node(data);
     temp ->next = head;
     head = temp;
 }
 void insertAtend(node*& tail,int data){
     node*temp = new node(data);
     tail->next = temp;
     
     tail = tail->next;
 }

 void print(node* &head,node*&tail){
     node*temp = head;
     while(temp != NULL){
         cout<<temp->data<<"  ";
         temp = temp -> next;

     }
     cout<<endl;

 }
 
 void insertAtposition(node*& head,node *&tail,int position,int data){
     node *temp = head;
     if(position==1){
         insertAtbegin(head,data);
         return;
     }
     if(temp ->next == NULL){
         temp= temp->next;
         return;
     }
     int count = 1;
     
     
     while(count<position-1){
         temp = temp ->next;
         count ++;
     }
     node *nodeToInsert = new node(data);
     nodeToInsert ->next = temp->next;
     temp->next = nodeToInsert;
 }
int main()
{

    node *n1 = new node(4);
    
     node*head = n1;
     node*tail = n1;
     insertAtbegin(head,4);
     
     insertAtbegin(head,3);
     
     insertAtbegin(head,2);
     
    
     
   
    
  
   insertAtend(tail,5);
      
      insertAtbegin(head,1);
     
     insertAtbegin(head,0);
     
     insertAtbegin(head,-1);
       
      
       insertAtposition(head,tail,2,45);
       insertAtend(tail,9);
       
       
       
     print(head,tail);
     
     deletenode(head,3);
     
     deletenode(head,3);
     deletenode(head,3);
     deletenode(head,1);
     deletenode(head,6);
     print(head,tail);
     
}
